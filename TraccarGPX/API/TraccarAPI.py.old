from flask import Flask, request, render_template, send_file, Response
from flask_restful import Resource, Api, reqparse
from flask_cors import CORS, cross_origin
import datetime
from datetime import timedelta
from requests.auth import HTTPBasicAuth
import requests
import json
import matplotlib.pyplot as plt
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import io

#sudo rm /var/www/html/TraccarGPX -R && cp /config/workspace/TraccarGPX/  /var/www/html/ -r

#sudo /etc/init.d/apache2 restart
#WSGIScriptAlias /traccar /var/www/html/TraccarGPX/API/TraccarAPI.py
#sudo cp /config/workspace/API /var/www/html/ -r
#sudo rm /var/www/html/API -R && sudo cp /config/workspace/API /var/www/html/ -r

application = Flask(__name__)

#https://api.sebright.synology.me/

@application.route('/')
def home():
   return render_template('index.html')

cors = CORS(application)
application.config['CORS_HEADERS'] = 'Content-Type'
api = Api(application)

#https://api.sebright.synology.me/DayGraph
class DayGraphAll(Resource):
    def get(self):
        period = 1
        today = datetime.datetime.now()
        dpiVal = int(request.args.get('dpi','1000'))
        end = today.strftime("%Y-%m-%dT%H:%M:%SZ")
        start = (today - timedelta(days=period)).strftime("%Y-%m-%dT00:00:00Z")
        traccrURL = f"https://traccar.sebright.synology.me/api/reports/route?deviceId=1&from={start}&to={end}"

        HTTPauth = HTTPBasicAuth('Ernie', 'Maplatlop2021!')
        response = requests.get(traccrURL, auth = HTTPauth)
        JSON = json.loads(response.content)

        date = []
        level = []
        lastday = 0
        day = 0

        for result in JSON:
            try: 
                result2 = result['attributes']
                bl = result2['batteryLevel']
                tm = result['fixTime']

                pdt = datetime.datetime.strptime(tm, '%Y-%m-%dT%H:%M:%S.000+00:00')
                day = pdt.day
                #if day != lastday:
                #date.append(f"{pdt.day}/{pdt.hour}:{pdt.minute}")
                date.append(pdt.strftime("%d/%H:%M"))
                #date.append()

                level.append(bl)
            except: pass

            lastday = day
            
        fig = plt.figure(figsize=(8,4), dpi=dpiVal, tight_layout=True)
        plt.plot(date, level, linewidth=0.5)
        #plt.plot(date, level, 'o', label='data')
        plt.title(f"WA10JHO 24h Vehicle Battery Charge State - Current: " + pdt.strftime("%H:%M") + f" ({bl}%)")
        plt.xlabel("Date [day/time]")
        plt.ylabel("Battery Charge [%]")
        plt.show()
        plt.xticks(rotation=45, fontsize=1)
        #plt.savefig("/config/workspace/TraccarGPX/battery.png")
        #return send_file("/config/workspace/TraccarGPX/battery.png", mimetype='image/png')
        output = io.BytesIO()
        FigureCanvas(fig).print_png(output)
        return Response(output.getvalue(), mimetype='image/png')

#https://api.sebright.synology.me/DayGraph
class DayGraph(Resource):
    def get(self):
        period = int(request.args.get('days','30'))
        dpiVal = int(request.args.get('dpi','180'))
        today = datetime.datetime.now()
        end = today.strftime("%Y-%m-%dT%H:%M:%SZ")
        start = (today - timedelta(days=period)).strftime("%Y-%m-%dT00:00:00Z")
        traccrURL = f"https://traccar.sebright.synology.me/api/reports/route?deviceId=1&from={start}&to={end}"

        HTTPauth = HTTPBasicAuth('Ernie', 'Maplatlop2021!')
        response = requests.get(traccrURL, auth = HTTPauth)
        JSON = json.loads(response.content)

        date = []
        level = []
        lastday = 0
        day = 0

        for result in JSON:
            try: 
                result2 = result['attributes']
                bl = result2['batteryLevel']
                tm = result['fixTime']

                pdt = datetime.datetime.strptime(tm, '%Y-%m-%dT%H:%M:%S.000+00:00')
                day = pdt.day
                if day != lastday:
                    date.append(pdt.strftime("%d-%m-%y"))
                    level.append(bl)
            except: pass

            lastday = day
            
        fig = plt.figure(figsize=(8,4), dpi=dpiVal, tight_layout=True)
        plt.plot(date, level)
        plt.plot(date, level, 'o', label='data')
        plt.title(f"WA10JHO Battery Charge (Daily) State - {period} Days - Current: " + pdt.strftime("%d-%m-%Y") + f" ({bl}%)")
        plt.xlabel("Date [ddate time]")
        plt.ylabel("Battery Charge [%]")
        plt.show()
        plt.xticks(rotation=45)
        #plt.savefig("/config/workspace/TraccarGPX/battery.png")
        #return send_file("/config/workspace/TraccarGPX/battery.png", mimetype='image/png')
        output = io.BytesIO()
        FigureCanvas(fig).print_png(output)
        return Response(output.getvalue(), mimetype='image/png')

#https://api.sebright.synology.me/HistGraph?days=10
class HistGraph(Resource):
    def get(self):
        period = int(request.args.get('days','30'))
        dpiVal = int(request.args.get('dpi','500'))
        today = datetime.datetime.now()
        end = today.strftime("%Y-%m-%dT%H:%M:%SZ")
        start = (today - timedelta(days=period)).strftime("%Y-%m-%dT%H:%M:%SZ")
        traccrURL = f"https://traccar.sebright.synology.me/api/reports/route?deviceId=1&from={start}&to={end}"

        HTTPauth = HTTPBasicAuth('Ernie', 'Maplatlop2021!')
        response = requests.get(traccrURL, auth = HTTPauth)
        JSON = json.loads(response.content)

        date = []
        level = []
        lastday = 0
        day = 0

        for result in JSON:
            try: 
                result2 = result['attributes']
                bl = result2['batteryLevel']
                tm = result['fixTime']

                pdt = datetime.datetime.strptime(tm, '%Y-%m-%dT%H:%M:%S.000+00:00')
                #day = pdt.hour
                if pdt.hour != lastday:
                    date.append(pdt.strftime("%d-%m-%Y %H:%M"))
                    level.append(bl)
                lastday = pdt.hour
            except: pass

        fig = plt.figure(figsize=(8,4), dpi=dpiVal, tight_layout=True)
        plt.plot(date, level)
        #plt.plot(date, level, 'o', label='data')
        plt.title(f"WA10JHO {period} day (hourly) Battery Charge State - {pdt} ({bl}%)")
        plt.xlabel("Date [date time]")
        plt.ylabel("Battery Charge [%]")
        plt.show()
        plt.xticks(rotation=45, fontsize=3)
        #plt.savefig("/config/workspace/TraccarGPX/battery.png")
        #return send_file("/config/workspace/TraccarGPX/battery.png", mimetype='image/png')
        output = io.BytesIO()
        FigureCanvas(fig).print_png(output)
        return Response(output.getvalue(), mimetype='image/png')

#https://api.sebright.synology.me/GPX
class GetGPX(Resource):
    @api.representation('application/xml')
    def get(self):
        f = open("/config/workspace/TraccarGPX/vantrack.xml","r")
        lines = f.readlines()
        return Response(lines, mimetype='application/xml')

api.add_resource(DayGraph, '/DayGraph')   
api.add_resource(DayGraphAll, '/DayGraphAll')   
api.add_resource(HistGraph, '/HistGraph')   
api.add_resource(GetGPX, '/GPX')   

if __name__ == '__main__':
    application.run(host='172.17.0.4', port=8005)#, debug=True)